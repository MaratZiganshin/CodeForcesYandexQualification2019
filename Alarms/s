#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

vector<int> t;

int sum(int T)
{
    int result =
    for (int i = 0; i < t.size(); i++)
    {

    }
}

int binary_search(int low, int high)
{
    int mid;

    while ( low <= high )
    {
        // find the middle index
        mid = low + ((high - low) >> 1);

        if ( ar[mid] == key ) // key found
        {
            return true;
        }
        else if ( ar[mid] > key ) // key may be on the left half
        {
            high = mid - 1;
        }
        else if ( ar[mid] < key ) // key may be on the right half
        {
            low = mid + 1;
        }
    }

    // key not found
    return false;
}

int main() {
    int N, X, K;
    cin >> N >> X >> K;

    for (int i = 0; i < N; i++)
    {
        int temp;
        cin >> temp;
        t.push_back(temp);
    }

    sort(t.begin(), t.end());

    for (int i = N - 1; i >= 0; i--)
    {
        for (int j = i - 1; j >= 0; j--)
        {
            if (t[i] % X == t[j] % X)
            {
                t.erase(t.begin() + i);
                break;
            }
        }
    }

    int T;

    int result = std::binary_search(*std::min_element(t.begin(), t.end()),
                       *std::max_element(t.begin(), t.end()) + (K + 1) * X,
                        func);

    cout << result;
}